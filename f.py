from human_eval.data import read_problems


def get_samples(num_samples_per_task, _get_code_from_api) -> list:
    """
    This function gets the samples for the code generation model.
    :return: The samples for the code generation model
    """

    problems = read_problems()

    samples = [
        dict(
            task_id=task_id,
            completion=generate(problems[task_id]["prompt"], _get_code_from_api),
        )
        for task_id in problems
        for _ in range(num_samples_per_task)
    ]
    return samples


def generate(prompt: str, _get_code_from_api) -> str:
    """
    The generate function takes a prompt as input and returns the generated code.
    The prompt is a string of text that will be used to generate code. The function
    returns the generated code as a string.

    :param prompt: Generate a code snippet
    :return: The code generated by the model
    """

    try:
        code = _get_code_from_api(prompt)
        return code
    except Exception as error:  # pylint: disable=broad-except
        print(error)
        return ""
