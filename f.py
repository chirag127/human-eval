import os
from human_eval.data import read_problems
from human_eval.data import write_jsonl
import random


def get_samples(num_samples_per_task, _get_code_from_api) -> list:
    """
    This function gets the samples for the code generation model.
    :return: The samples for the code generation model
    """

    problems = read_problems()

    samples = [
        dict(
            task_id=task_id,
            completion=generate(problems[task_id]["prompt"], _get_code_from_api),
        )
        for task_id in problems
        for _ in range(num_samples_per_task)
    ]
    return samples


def generate(prompt: str, _get_code_from_api) -> str:
    """
    The generate function takes a prompt as input and returns the generated code.
    The prompt is a string of text that will be used to generate code. The function
    returns the generated code as a string.

    :param prompt: Generate a code snippet
    :return: The code generated by the model
    """

    try:
        code = _get_code_from_api(prompt)
        return code
    except Exception as error:  # pylint: disable=broad-except
        print(error)
        return ""

def write_jsonl_in_folder(folder_name,samples):
    """
    This function writes the samples to a jsonl file.
    :param samples: The samples to write to a file
    :param file_name: The name of the file to write to
    """
    file_name  = (str(random.random())).replace(".", "_")+ ".jsonl"

    # check if folder exists
    if not os.path.exists(folder_name):
        os.makedirs(folder_name)

    full_file_name = folder_name + "/" + file_name


    write_jsonl( full_file_name,samples)
